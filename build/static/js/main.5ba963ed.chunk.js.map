{"version":3,"sources":["images/WeatherIcons.gif","apiKeys.js","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiKeys","key","process","base","Forcast","props","query","setQuery","useState","error","setError","weather","setWeather","search","useCallback","city","console","log","axios","get","then","response","data","catch","message","defaults","useEffect","React","createElement","className","ReactAnimatedWeather","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","handleSearch","alt","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","Weather","Component","constructor","arguments","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","async","api_call","fetch","json","this","setState","componentDidMount","position","coords","latitude","longitude","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Fragment","id","Clock","format","interval","ticking","d","Date","getDay","getDate","getMonth","getFullYear","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","App","CurrentLocation","rel","href","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ba963ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","// config.js or apiKeys.js\nconst apiKeys = {\n  key: process.env.REACT_APP_WEATHER_API_KEY,\n  base: process.env.REACT_APP_API_BASE_URL,\n};\n\nexport default apiKeys;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = useCallback((city) => {\n    console.log(\"search function called\");\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city !== \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch((error) => {\n        console.log(error);\n        setError({ message: \"Not Found\", query: query });\n        setQuery(\"\");\n      });\n  }, [query]);\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  useEffect(() => {\n    search(\"Delhi\");\n  }, [search]);\n\n  const handleSearch = () => {\n    search(query);\n  };\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={handleSearch}\n              alt=\"Search icon\"\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main !== \"undefined\" ? (\n            <div>\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"Weather icon\"\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Forcast;\n","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"#686767\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}Â°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} alt=\"\" style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      <div className=\"footer-info\">\n        \n       Made with ð©µ\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Abhishek-yadav-12\">\n          Abhishek Yadav\n        </a>\n       \n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}